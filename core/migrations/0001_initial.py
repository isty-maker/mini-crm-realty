# Generated by Django 5.2.7 on 2025-10-03 13:24

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(max_length=100, unique=True, verbose_name='Внешний ID')),
                ('category', models.CharField(choices=[('flatRent', 'Квартира (аренда)'), ('bedRent', 'Койко-место (аренда)'), ('roomRent', 'Комната (аренда)'), ('houseRent', 'Дом/дача (аренда)'), ('cottageRent', 'Коттедж (аренда)'), ('townhouseRent', 'Таунхаус (аренда)'), ('houseShareRent', 'Часть дома (аренда)'), ('garageRent', 'Гараж (аренда)'), ('buildingRent', 'Здание (аренда)'), ('commercialLandRent', 'Коммерческая земля (аренда)'), ('officeRent', 'Офис (аренда)'), ('freeAppointmentObjectRent', 'ПСН (аренда)'), ('industryRent', 'Производство (аренда)'), ('warehouseRent', 'Склад (аренда)'), ('shoppingAreaRent', 'Торговая площадь (аренда)'), ('dailyHouseRent', 'Посуточно дом/дача/коттедж'), ('dailyFlatRent', 'Посуточно квартира'), ('dailyBedRent', 'Посуточно койко-место'), ('dailyRoomRent', 'Посуточно комната'), ('flatShareSale', 'Доля в квартире (продажа)'), ('flatSale', 'Квартира (продажа)'), ('newBuildingFlatSale', 'Квартира в новостройке (продажа)'), ('roomSale', 'Комната (продажа)'), ('houseSale', 'Дом/дача (продажа)'), ('cottageSale', 'Коттедж (продажа)'), ('townhouseSale', 'Таунхаус (продажа)'), ('landSale', 'Участок (продажа)'), ('houseShareSale', 'Часть дома (продажа)'), ('garageSale', 'Гараж (продажа)'), ('businessSale', 'Готовый бизнес (продажа)'), ('buildingSale', 'Здание (продажа)'), ('commercialLandSale', 'Коммерческая земля (продажа)'), ('officeSale', 'Офис (продажа)'), ('freeAppointmentObjectSale', 'ПСН (продажа)'), ('industrySale', 'Производство (продажа)'), ('warehouseSale', 'Склад (продажа)'), ('shoppingAreaSale', 'Торговая площадь (продажа)')], max_length=64, verbose_name='Категория (ЦИАН)')),
                ('title', models.CharField(blank=True, max_length=64, verbose_name='Заголовок (внутр.)')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Адрес (как на Я.Картах)')),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Широта')),
                ('lng', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Долгота')),
                ('cadastral_number', models.CharField(blank=True, max_length=64, verbose_name='Кадастровый номер')),
                ('phone_country', models.CharField(blank=True, max_length=8, verbose_name='Код страны')),
                ('phone_number', models.CharField(blank=True, max_length=32, verbose_name='Телефон №1')),
                ('phone_number2', models.CharField(blank=True, max_length=32, verbose_name='Телефон №2 (опц.)')),
                ('layout_photo_url', models.URLField(blank=True, verbose_name='URL планировки (опц.)')),
                ('object_tour_url', models.URLField(blank=True, verbose_name='URL 3D-тура (опц.)')),
                ('building_name', models.CharField(blank=True, max_length=128, verbose_name='Название здания/ЖК (опц.)')),
                ('building_floors', models.PositiveIntegerField(blank=True, null=True, verbose_name='Этажей в здании')),
                ('building_build_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Год постройки')),
                ('building_material', models.CharField(blank=True, choices=[('aerocreteBlock', 'Газобетонный блок'), ('arbolit', 'Арболит'), ('boards', 'Щитовой'), ('brick', 'Кирпичный'), ('expandedClayConcrete', 'Керамзитобетон'), ('foamConcreteBlock', 'Пенобетонный блок'), ('gasSilicateBlock', 'Газосиликатный блок'), ('gluedLaminatedTimber', 'Клееный брус'), ('metalFrame', 'Металлокаркас'), ('monolith', 'Монолит'), ('reinforcedConcretePanels', 'ЖБ панели'), ('sipPanels', 'СИП-панели'), ('slagConcrete', 'Шлакобетон'), ('solidWood', 'Цельное дерево'), ('wireframe', 'Каркасный'), ('wood', 'Деревянный')], max_length=64, verbose_name='Материал здания')),
                ('building_ceiling_height', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Высота потолков, м')),
                ('building_passenger_lifts', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Пассажирских лифтов')),
                ('building_cargo_lifts', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Грузовых лифтов')),
                ('room_type', models.CharField(blank=True, choices=[('separate', 'Изолированная'), ('combined', 'Совмещенная'), ('both', 'Оба варианта')], max_length=16, verbose_name='Тип комнат')),
                ('flat_rooms_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Кол-во комнат (кв.)')),
                ('is_euro_flat', models.BooleanField(default=False, verbose_name='Европланировка')),
                ('is_apartments', models.BooleanField(default=False, verbose_name='Апартаменты (юрид.)')),
                ('is_penthouse', models.BooleanField(default=False, verbose_name='Пентхаус')),
                ('total_area', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Общая площадь, м²')),
                ('living_area', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Жилая площадь, м²')),
                ('kitchen_area', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Площадь кухни, м²')),
                ('floor_number', models.IntegerField(blank=True, null=True, verbose_name='Этаж')),
                ('loggias_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Лоджии')),
                ('balconies_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Балконы')),
                ('windows_view_type', models.CharField(blank=True, choices=[('street', 'На улицу'), ('yard', 'Во двор'), ('yardAndStreet', 'На улицу и двор')], max_length=20, verbose_name='Куда окна')),
                ('separate_wcs_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Раздельные с/у')),
                ('combined_wcs_count', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Совмещённые с/у')),
                ('repair_type', models.CharField(blank=True, choices=[('cosmetic', 'Косметический'), ('design', 'Дизайнерский'), ('euro', 'Евроремонт'), ('no', 'Без ремонта')], max_length=16, verbose_name='Ремонт')),
                ('jk_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ID ЖК (ЦИАН)')),
                ('jk_name', models.CharField(blank=True, max_length=128, verbose_name='Название ЖК')),
                ('house_id', models.PositiveBigIntegerField(blank=True, null=True, verbose_name='ID корпуса (ЦИАН)')),
                ('house_name', models.CharField(blank=True, max_length=128, verbose_name='Название корпуса')),
                ('flat_number', models.CharField(blank=True, max_length=32, verbose_name='Номер квартиры (не показывается)')),
                ('section_number', models.CharField(blank=True, max_length=32, verbose_name='№ секции')),
                ('heating_type', models.CharField(blank=True, choices=[('autonomousGas', 'Автономное газовое'), ('centralCoal', 'Центральное угольное'), ('centralGas', 'Центральное газовое'), ('diesel', 'Дизельное'), ('electric', 'Электрическое'), ('fireplace', 'Камин'), ('no', 'Нет'), ('solidFuelBoiler', 'Твердотопливный котел'), ('stove', 'Печь')], max_length=32, verbose_name='Отопление')),
                ('land_area', models.DecimalField(blank=True, decimal_places=2, max_digits=7, null=True, verbose_name='Площадь участка')),
                ('land_area_unit', models.CharField(blank=True, choices=[('sotka', 'Сотка'), ('hectare', 'Гектар')], max_length=8, verbose_name='Единица участка')),
                ('permitted_land_use', models.CharField(blank=True, choices=[('individualHousingConstruction', 'ИЖС'), ('privateFarm', 'ЛПХ'), ('gardening', 'Садоводство'), ('horticulture', 'Огородничество'), ('suburbanNonProfitPartnership', 'Дачное хозяйство'), ('farm', 'Фермерское хозяйство'), ('other', 'Иное')], max_length=48, verbose_name='ВРИ участка')),
                ('is_land_with_contract', models.BooleanField(default=False, verbose_name='Участок с подрядом')),
                ('land_category', models.CharField(blank=True, choices=[('settlements', 'Земли населенных пунктов'), ('forAgriculturalPurposes', 'С/Х назначения'), ('other', 'Иное')], max_length=32, verbose_name='Категория земель')),
                ('has_terrace', models.BooleanField(default=False, verbose_name='Есть терраса')),
                ('has_cellar', models.BooleanField(default=False, verbose_name='Есть погреб')),
                ('is_rent_by_parts', models.BooleanField(default=False, verbose_name='Сдаётся по частям')),
                ('rent_by_parts_desc', models.CharField(blank=True, max_length=255, verbose_name='Описание сдачи части')),
                ('ceiling_height', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Высота потолка (комм.), м')),
                ('power', models.PositiveIntegerField(blank=True, null=True, verbose_name='Выделенная мощность, кВт')),
                ('parking_places', models.PositiveIntegerField(blank=True, null=True, verbose_name='Паркомест')),
                ('has_parking', models.BooleanField(default=False, verbose_name='Есть парковка')),
                ('has_internet', models.BooleanField(default=False, verbose_name='Интернет')),
                ('has_furniture', models.BooleanField(default=False, verbose_name='Мебель')),
                ('has_kitchen_furniture', models.BooleanField(default=False, verbose_name='Мебель на кухне')),
                ('has_tv', models.BooleanField(default=False, verbose_name='Телевизор')),
                ('has_washer', models.BooleanField(default=False, verbose_name='Стиральная машина')),
                ('has_conditioner', models.BooleanField(default=False, verbose_name='Кондиционер')),
                ('has_phone', models.BooleanField(default=False, verbose_name='Телефон (городской)')),
                ('has_ramp', models.BooleanField(default=False, verbose_name='Пандус')),
                ('has_bathtub', models.BooleanField(default=False, verbose_name='Ванна')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Цена')),
                ('currency', models.CharField(choices=[('rur', 'RUB'), ('usd', 'USD'), ('eur', 'EUR')], default='rur', max_length=3, verbose_name='Валюта')),
                ('mortgage_allowed', models.BooleanField(default=False, verbose_name='Ипотека возможна')),
                ('agent_bonus_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Бонус агенту (число)')),
                ('agent_bonus_is_percent', models.BooleanField(default=False, verbose_name='Бонус в %')),
                ('security_deposit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Залог (аренда)')),
                ('min_rent_term_months', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Мин. срок аренды (мес.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_url', models.URLField(verbose_name='URL изображения')),
                ('is_default', models.BooleanField(default=False, verbose_name='Фото по умолчанию')),
                ('prop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='core.property')),
            ],
            options={
                'ordering': ['-is_default', 'id'],
            },
        ),
    ]
